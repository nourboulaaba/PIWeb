{% extends 'reset_password/base_reset_password.html.twig' %}

{% block title %}Réinitialisation du mot de passe{% endblock %}

{% block stylesheets %}
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        body {
            background: url('/frontoffice/img/r1.jpg') no-repeat center center fixed;
            background-size: cover;
            font-family: 'Inter', sans-serif;
        }
        .card {
            border: none;
            border-radius: 1.2rem;
            box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
            background: rgba(255, 255, 255, 0.85);
        }
        .form-control.is-invalid {
            border-color: #dc3545;
            background-image: none;
        }
        .btn-primary {
            background-color: #0061f2;
            border: none;
            border-radius: 0.5rem;
            padding: 0.75rem;
            font-weight: 600;
        }
        .btn-primary:hover {
            background-color: #004bb5;
        }
        .small-text {
            font-size: 0.9rem;
        }
        .logo {
            width: 180px; /* Agrandi le logo */
            margin-bottom: 20px;
        }
        .password-requirements {
            margin-top: 1rem;
            padding: 1rem;
            background-color: rgba(248, 249, 252, 0.8);
            border-radius: 5px;
            border-left: 4px solid #0061f2;
        }
        .password-requirements h5 {
            color: #0061f2;
            font-size: 1rem;
            margin-bottom: 0.5rem;
        }
        .password-requirements ul {
            padding-left: 1.5rem;
            margin-bottom: 0;
        }
        .password-requirements li {
            margin-bottom: 0.25rem;
            color: #495057;
            font-size: 0.9rem;
        }

        .invalid-feedback {
            display: block;
            width: 100%;
            margin-top: 0.25rem;
            font-size: 0.875em;
            color: #dc3545;
        }

        .form-control.is-invalid {
            border-color: #dc3545;
            padding-right: calc(1.5em + 0.75rem);
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");
            background-repeat: no-repeat;
            background-position: right calc(0.375em + 0.1875rem) center;
            background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
        }

        .form-control.is-valid {
            border-color: #198754;
            padding-right: calc(1.5em + 0.75rem);
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%23198754' d='M2.3 6.73L.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3e%3c/svg%3e");
            background-repeat: no-repeat;
            background-position: right calc(0.375em + 0.1875rem) center;
            background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
        }

        .text-danger {
            color: #dc3545 !important;
            font-weight: bold;
        }

        .invalid-feedback {
            display: block;
            width: 100%;
            margin-top: 0.25rem;
            font-size: 0.875em;
            color: #dc3545;
            font-weight: bold;
        }
    </style>
{% endblock %}

{% block body %}
<div class="container d-flex align-items-center justify-content-center vh-100">
    <div class="col-md-6 col-lg-5">
        <div class="text-center mb-4">
            <img src="/frontoffice/img/logoTrueMAtch.png" alt="TRUEMATCH Logo" class="logo">
            <h1 class="h4 fw-bold text-white">Réinitialisation du mot de passe</h1>
            <p class="text-light">Veuillez choisir un nouveau mot de passe sécurisé</p>
        </div>

        <div class="card p-4">
            <div class="card-body">
                {{ form_start(resetForm, {'attr': {'novalidate': 'novalidate', 'id': 'resetPasswordForm'}}) }}
                    <div class="mb-3">
                        <label for="{{ resetForm.plainPassword.first.vars.id }}" class="form-label">Nouveau mot de passe</label>
                        {{ form_widget(resetForm.plainPassword.first, {'attr': {'class': 'form-control', 'placeholder': 'Entrez votre nouveau mot de passe', 'id': 'password1'}}) }}
                        <div id="password1Error" class="invalid-feedback"></div>
                        {% if resetForm.plainPassword.first.vars.errors|length > 0 %}
                            <div class="text-danger mt-1">
                                {% for error in resetForm.plainPassword.first.vars.errors %}
                                    <small><i class="fas fa-exclamation-circle"></i> {{ error.message }}</small>
                                {% endfor %}
                            </div>
                        {% endif %}
                    </div>

                    <div class="mb-3">
                        <label for="{{ resetForm.plainPassword.second.vars.id }}" class="form-label">Confirmer le mot de passe</label>
                        {{ form_widget(resetForm.plainPassword.second, {'attr': {'class': 'form-control', 'placeholder': 'Confirmez votre nouveau mot de passe', 'id': 'password2'}}) }}
                        <div id="password2Error" class="invalid-feedback"></div>
                        {% if resetForm.plainPassword.second.vars.errors|length > 0 %}
                            <div class="text-danger mt-1">
                                {% for error in resetForm.plainPassword.second.vars.errors %}
                                    <small><i class="fas fa-exclamation-circle"></i> {{ error.message }}</small>
                                {% endfor %}
                            </div>
                        {% endif %}
                    </div>

                    <div class="password-requirements">
                        <h5><i class="fas fa-shield-alt me-2"></i>Exigences de sécurité</h5>
                        <ul>
                            <li>Au moins 8 caractères</li>
                            <li>Au moins une lettre majuscule</li>
                            <li>Au moins une lettre minuscule</li>
                            <li>Au moins un chiffre</li>
                            <li>Au moins un caractère spécial</li>
                        </ul>
                    </div>

                    <div class="d-grid mt-4">
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-key me-2"></i>
                            Réinitialiser le mot de passe
                        </button>
                    </div>
                {{ form_end(resetForm) }}
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    // Affichage des messages flash avec SweetAlert
    document.addEventListener("DOMContentLoaded", function() {
        {% for label, messages in app.flashes %}
            {% for message in messages %}
                Swal.fire({
                    title: '{{ label == "success" ? "Succès" : (label == "warning" ? "Attention" : (label == "info" ? "Information" : "Erreur")) }}',
                    html: '{{ message|raw|escape('js') }}',
                    icon: '{{ label == "success" ? "success" : (label == "warning" ? "warning" : (label == "info" ? "info" : "error")) }}',
                    confirmButtonText: 'OK',
                    confirmButtonColor: '{{ label == "success" ? "#28a745" : (label == "warning" ? "#ffc107" : (label == "info" ? "#17a2b8" : "#dc3545")) }}'
                });
            {% endfor %}
        {% endfor %}

        // Validation du formulaire de réinitialisation de mot de passe
        const form = document.getElementById('resetPasswordForm');
        const password1 = document.getElementById('password1');
        const password2 = document.getElementById('password2');
        const password1Error = document.getElementById('password1Error');
        const password2Error = document.getElementById('password2Error');

        // Fonction pour valider le mot de passe
        function validatePassword(password) {
            if (!password.trim()) {
                return { isValid: false, message: "Le mot de passe est requis" };
            }

            if (password.length < 8) {
                return { isValid: false, message: "Le mot de passe doit contenir au moins 8 caractères" };
            }

            // Vérifier s'il contient au moins une lettre majuscule
            if (!/[A-Z]/.test(password)) {
                return { isValid: false, message: "Le mot de passe doit contenir au moins une lettre majuscule" };
            }

            // Vérifier s'il contient au moins une lettre minuscule
            if (!/[a-z]/.test(password)) {
                return { isValid: false, message: "Le mot de passe doit contenir au moins une lettre minuscule" };
            }

            // Vérifier s'il contient au moins un chiffre
            if (!/[0-9]/.test(password)) {
                return { isValid: false, message: "Le mot de passe doit contenir au moins un chiffre" };
            }

            // Vérifier s'il contient au moins un caractère spécial
            if (!/[^A-Za-z0-9]/.test(password)) {
                return { isValid: false, message: "Le mot de passe doit contenir au moins un caractère spécial" };
            }

            return { isValid: true, message: "" };
        }

        // Fonction pour valider la confirmation du mot de passe
        function validatePasswordConfirmation(password, confirmation) {
            if (!confirmation.trim()) {
                return { isValid: false, message: "La confirmation du mot de passe est requise" };
            }

            if (password !== confirmation) {
                return { isValid: false, message: "Les mots de passe ne correspondent pas" };
            }

            return { isValid: true, message: "" };
        }

        // Fonction pour définir l'état de validation
        function setValidationState(element, errorElement, validation) {
            if (validation.isValid) {
                element.classList.remove('is-invalid');
                element.classList.add('is-valid');
                errorElement.textContent = "";
                errorElement.style.display = "none";
            } else {
                element.classList.remove('is-valid');
                element.classList.add('is-invalid');
                errorElement.textContent = validation.message;
                errorElement.style.color = "#dc3545";
                errorElement.style.display = "block";
                errorElement.style.marginTop = "0.25rem";
                errorElement.style.fontSize = "0.875em";
                errorElement.style.fontWeight = "bold";
            }
            return validation.isValid;
        }

        // Validation lors de la saisie
        password1.addEventListener('input', function() {
            const validation = validatePassword(password1.value);
            setValidationState(password1, password1Error, validation);

            // Si le mot de passe 2 est déjà rempli, vérifier la correspondance
            if (password2.value.trim() !== '') {
                const validationConfirm = validatePasswordConfirmation(password1.value, password2.value);
                setValidationState(password2, password2Error, validationConfirm);
            }
        });

        password2.addEventListener('input', function() {
            const validation = validatePasswordConfirmation(password1.value, password2.value);
            setValidationState(password2, password2Error, validation);
        });

        // Validation lors de la perte de focus
        password1.addEventListener('blur', function() {
            const validation = validatePassword(password1.value);
            setValidationState(password1, password1Error, validation);
        });

        password2.addEventListener('blur', function() {
            const validation = validatePasswordConfirmation(password1.value, password2.value);
            setValidationState(password2, password2Error, validation);
        });

        // Validation du formulaire à la soumission
        form.addEventListener('submit', function(event) {
            let isFormValid = true;

            const password1Validation = validatePassword(password1.value);
            isFormValid = setValidationState(password1, password1Error, password1Validation) && isFormValid;

            const password2Validation = validatePasswordConfirmation(password1.value, password2.value);
            isFormValid = setValidationState(password2, password2Error, password2Validation) && isFormValid;

            if (!isFormValid) {
                event.preventDefault();
            }
        });
    });
</script>
{% endblock %}
