{% extends 'indexback.html.twig' %}

{% block title %}Liste des Utilisateurs{% endblock %}

{% block stylesheets %}
  {{ parent() }}
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
  <link rel="stylesheet" href="{{ asset('css/custom-pagination.css') }}">
  <style>
    /* Styles généraux */
    .dashboard-container {
      background-color: #f8f9fc;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
      padding: 1.5rem;
    }
    .dashboard-header {
      border-bottom: 1px solid #e3e6f0;
      margin-bottom: 1.5rem;
      padding-bottom: 1rem;
    }
    /* Tableau des utilisateurs */
    .users-table {
      border-radius: 8px;
      overflow: hidden;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.04);
    }
    .users-table thead th {
      background: linear-gradient(to right, #4e73df, #224abe);
      color: #fff;
      font-weight: 500;
      text-transform: uppercase;
      font-size: 0.8rem;
      letter-spacing: 0.03em;
      padding: 1rem 0.75rem;
      border-bottom: none;
      white-space: nowrap;
    }

    .users-table tbody tr {
      transition: all 0.2s ease;
    }

    .users-table tbody tr:hover {
      background-color: rgba(78, 115, 223, 0.05);
      transform: translateY(-1px);
    }
    /* Images & Photos */
    .user-photo {
      width: 45px;
      height: 45px;
      object-fit: cover;
      border-radius: 8px;
      border: 2px solid #fff;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      transition: transform 0.2s ease;
    }

    .user-photo:hover {
      transform: scale(1.1);
    }

    .photo-placeholder {
      width: 45px;
      height: 45px;
      border-radius: 8px;
      background-color: #f2f2f2;
      display: flex;
      align-items: center;
      justify-content: center;
      color: #b0b0b0;
      font-size: 1.2rem;
    }
    /* Badges & Status */
    .badge-role {
      padding: 0.35em 0.8em;
      font-size: 0.75em;
      text-transform: uppercase;
      border-radius: 30px;
      letter-spacing: 0.03em;
      font-weight: 600;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      transition: all 0.2s ease;
    }

    .badge-role:hover {
      transform: translateY(-1px);
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.15);
    }

    .badge-role.rh {
      background-color: #4e73df;
      color: white;
    }

    .badge-role.employe {
      background-color: #4895ef;
      color: white;
    }

    .badge-role.admin {
      background-color: #f6c23e;
      color: #333;
    }
    .status-badge {
      padding: 0.35em 0.8em;
      font-size: 0.75em;
      border-radius: 30px;
      font-weight: 600;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      transition: all 0.2s ease;
    }

    .status-badge:hover {
      transform: translateY(-1px);
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.15);
    }

    .status-badge.active {
      background-color: #1cc88a;
      color: white;
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .status-badge.inactive {
      background-color: #e74a3b;
      color: white;
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    /* Boutons & Actions */
    .action-btn {
      padding: 0.4rem;
      width: 32px;
      height: 32px;
      border-radius: 6px;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      color: white;
      margin-right: 5px;
      font-size: 0.8rem;
      transition: all 0.2s ease;
      border: none;
    }
    .action-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .action-btn.view {
      background-color: #4e73df;
    }

    .action-btn.edit {
      background-color: #f6c23e;
    }

    .action-btn.delete {
      background-color: #e74a3b;
    }

    .cv-link {
      padding: 0.35em 0.6em;
      background: #f8f9fc;
      border-radius: 4px;
      color: #4e73df;
      text-decoration: none;
      transition: all 0.3s ease;
      border: 1px solid #e3e6f0;
      font-size: 0.8rem;
    }
    .cv-link:hover {
      background: #4e73df;
      color: white;
    }
    /* Recherche & Filtres */
    .search-container {
      background-color: white;
      border-radius: 8px;
      padding: 1rem;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.03);
      margin-bottom: 1.5rem;
    }
    .search-input {
      border-radius: 50px;
      padding-left: 1rem;
      border: 1px solid #e3e6f0;
      box-shadow: none;
      transition: all 0.2s ease;
    }
    .search-input:focus {
      border-color: #4e73df;
      box-shadow: 0 0 0 0.2rem rgba(78, 115, 223, 0.25);
    }
    .search-btn {
      border-radius: 50px;
      padding: 0.375rem 1.2rem;
    }
    .filter-select {
      border-radius: 50px;
      padding: 0.375rem 1.2rem;
      border: 1px solid #e3e6f0;
      background-color: white;
      transition: all 0.2s ease;
    }
    .filter-select:focus {
      border-color: #4e73df;
      box-shadow: 0 0 0 0.2rem rgba(78, 115, 223, 0.25);
    }
    /* Pagination */
    .pagination-container {
      display: flex;
      justify-content: center;
      margin: 1.5rem 0;
    }
    .pagination .page-link {
      border-radius: 50px;
      margin: 0 0.2rem;
      min-width: 36px;
      height: 36px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: 500;
      color: #5a5c69;
      border: none;
    }
    .pagination .page-link:hover {
      background-color: #eaecf4;
      color: #3a3b45;
    }
    .pagination .active .page-link {
      background-color: #4e73df;
      color: white;
    }

    /* Styles pour les liens de tri */
    .sort-link {
      cursor: pointer;
      text-decoration: none;
      transition: all 0.2s ease;
    }

    .sort-link:hover {
      opacity: 0.8;
    }

    .sort-link i {
      transition: transform 0.2s ease;
    }

    .sort-link:hover i {
      transform: translateY(-1px);
    }

    /* Styles pour les champs vides */
    .empty-field {
      color: #b7b9cc;
      font-style: italic;
      font-size: 0.85rem;
    }
    /* Responsive design */
    @media (max-width: 992px) {
      .compact-column {
        max-width: 120px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
      }
      .dashboard-container {
        padding: 1rem;
      }
    }
    @media (max-width: 768px) {
      .users-table {
        display: block;
        overflow-x: auto;
      }

      .search-container {
        flex-direction: column;
      }

      .filter-form {
        margin-top: 1rem;
      }
    }
  </style>
{% endblock %}

{% block body %}
  <div class="container-fluid">
    <div class="dashboard-container animate__animated animate__fadeIn">
      <div class="dashboard-header d-flex justify-content-between align-items-center">
        <div>
          <h1 class="h3 mb-0 text-gray-800">Liste des Utilisateurs</h1>
          <p class="text-muted small">Gestion complète des utilisateurs du système</p>
        </div>
        <div class="d-flex gap-2">
          <a href="{{ path('app_user_export_excel') }}" class="btn btn-success d-flex align-items-center">
            <i class="fas fa-file-excel me-2"></i> Exporter Excel
          </a>
          <a href="{{ path('app_register') }}" class="btn btn-primary d-flex align-items-center">
            <i class="fas fa-user-plus me-2"></i> Ajouter un utilisateur
          </a>
        </div>
      </div>

      <div class="search-container">
        <div class="row mb-3">
          <div class="col-md-6">
            <div class="input-group">
              <input type="text" id="search-input" class="form-control search-input" placeholder="Rechercher un utilisateur..." value="{{ criteria.search|default('') }}">
              <button class="btn btn-primary search-btn" id="search-btn">
                <i class="fas fa-search"></i>
              </button>
            </div>
          </div>
          <div class="col-md-6 d-flex justify-content-end">
            <div class="d-flex gap-2">
              <select id="role-filter" class="form-select filter-select">
                <option value="">Tous les rôles</option>
                <option value="RH" {% if criteria.role == 'RH' %}selected{% endif %}>RH</option>
                <option value="EMPLOYE" {% if criteria.role == 'EMPLOYE' %}selected{% endif %}>Employé</option>
                <option value="ADMIN" {% if criteria.role == 'ADMIN' %}selected{% endif %}>Admin</option>
              </select>
              <select id="status-filter" class="form-select filter-select">
                <option value="">Tous les statuts</option>
                <option value="1" {% if criteria.is_verified == '1' %}selected{% endif %}>Actif</option>
                <option value="0" {% if criteria.is_verified == '0' %}selected{% endif %}>Inactif</option>
              </select>
            </div>
          </div>
        </div>

        <div class="row">
          <div class="col-md-12">
            <div class="d-flex justify-content-between align-items-center">
              <div class="d-flex gap-2">
                <button class="btn btn-outline-primary btn-sm" id="sort-salary-asc">
                  <i class="fas fa-sort-amount-up-alt me-1"></i> Salaire croissant
                </button>
                <button class="btn btn-outline-primary btn-sm" id="sort-salary-desc">
                  <i class="fas fa-sort-amount-down-alt me-1"></i> Salaire décroissant
                </button>
                <button class="btn btn-outline-primary btn-sm" id="sort-name-asc">
                  <i class="fas fa-sort-alpha-up me-1"></i> Nom A-Z
                </button>
                <button class="btn btn-outline-primary btn-sm" id="sort-name-desc">
                  <i class="fas fa-sort-alpha-down me-1"></i> Nom Z-A
                </button>
              </div>
              <div>
                <button class="btn btn-outline-secondary btn-sm" id="reset-filters">
                  <i class="fas fa-undo me-1"></i> Réinitialiser
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Statistiques -->
      <div class="row mb-4">
        <div class="col-md-6">
          <div class="card shadow-sm">
            <div class="card-header bg-primary text-white">
              <h5 class="mb-0"><i class="fas fa-users me-2"></i> Répartition par rôle</h5>
            </div>
            <div class="card-body">
              <div class="d-flex justify-content-around">
                {% for role, count in roleStats %}
                  <div class="text-center">
                    <div class="badge-role {% if role == 'RH' %}rh{% elseif role == 'EMPLOYE' %}employe{% else %}admin{% endif %} mb-2">
                      {{ role }}
                    </div>
                    <h4>{{ count }}</h4>
                  </div>
                {% endfor %}
              </div>
            </div>
          </div>
        </div>
        <div class="col-md-6">
          <div class="card shadow-sm">
            <div class="card-header bg-success text-white">
              <h5 class="mb-0"><i class="fas fa-money-bill-wave me-2"></i> Salaire moyen par rôle</h5>
            </div>
            <div class="card-body">
              <div class="d-flex justify-content-around">
                {% for role, salary in salaryStats %}
                  <div class="text-center">
                    <div class="badge-role {% if role == 'RH' %}rh{% elseif role == 'EMPLOYE' %}employe{% else %}admin{% endif %} mb-2">
                      {{ role }}
                    </div>
                    <h4>{{ salary|number_format(2, ',', ' ') }}DT</h4>
                  </div>
                {% endfor %}
              </div>
            </div>
          </div>
        </div>
      </div>

      <div class="card shadow-sm mb-4">
        <div class="card-body p-0">
          <div id="users-table-container">
            {% include 'user/_users_table.html.twig' with {'users': users} %}
          </div>
        </div>
      </div>
    </div>
  </div>
{% endblock %}

{% block javascripts %}
  {{ parent() }}
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Variables pour les critères de recherche
      let searchCriteria = {
        search: '{{ criteria.search|default('') }}',
        role: '{{ criteria.role|default('') }}',
        is_verified: '{{ criteria.is_verified|default('') }}',
        sort_by: '{{ criteria.sort_by|default('') }}',
        sort_dir: '{{ criteria.sort_dir|default('') }}',
        page: 1
      };

      // Animation à l'entrée des lignes du tableau
      animateTableRows();

      // Fonction pour animer les lignes du tableau
      function animateTableRows() {
        const tableRows = document.querySelectorAll('.users-table tbody tr');
        tableRows.forEach((row, index) => {
          row.style.opacity = '0';
          row.style.transform = 'translateY(10px)';
          setTimeout(() => {
            row.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
            row.style.opacity = '1';
            row.style.transform = 'translateY(0)';
          }, 100 + (index * 50));
        });
      }

      // Fonction pour confirmer la suppression d'un utilisateur
      window.confirmDelete = function(url, token) {
        Swal.fire({
          title: 'Êtes-vous sûr ?',
          text: "Cette action est irréversible et supprimera définitivement l'utilisateur.",
          icon: 'warning',
          showCancelButton: true,
          confirmButtonColor: '#e74a3b',
          cancelButtonColor: '#6c757d',
          confirmButtonText: 'Oui, supprimer',
          cancelButtonText: 'Annuler'
        }).then((result) => {
          if (result.isConfirmed) {
            const form = document.createElement('form');
            form.method = 'POST';
            form.action = url;
            form.style.display = 'none';

            const csrfInput = document.createElement('input');
            csrfInput.type = 'hidden';
            csrfInput.name = '_token';
            csrfInput.value = token;

            form.appendChild(csrfInput);
            document.body.appendChild(form);
            form.submit();
          }
        });
      };

      // Fonction pour confirmer l'activation/désactivation d'un utilisateur
      window.confirmUserAction = function(url, action, title, text) {
        Swal.fire({
          title: title,
          text: text,
          icon: 'question',
          showCancelButton: true,
          confirmButtonColor: action === 'Activer' ? '#1cc88a' : '#e74a3b',
          cancelButtonColor: '#6c757d',
          confirmButtonText: 'Oui, ' + action.toLowerCase(),
          cancelButtonText: 'Annuler'
        }).then((result) => {
          if (result.isConfirmed) {
            window.location.href = url;
          }
        });
      };

      // Fonction pour charger les utilisateurs avec AJAX
      function loadUsers() {
        // Afficher un indicateur de chargement
        document.getElementById('users-table-container').innerHTML = '<div class="text-center py-5"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Chargement...</span></div><p class="mt-2">Chargement des utilisateurs...</p></div>';

        // Construire l'URL avec les critères de recherche
        const queryParams = new URLSearchParams();
        for (const key in searchCriteria) {
          if (searchCriteria[key]) {
            queryParams.append(key, searchCriteria[key]);
          }
        }

        // Faire la requête AJAX
        fetch(`/ajax/users/search?${queryParams.toString()}`, {
          method: 'GET',
          headers: {
            'Accept': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
          }
        })
        .then(response => {
          if (!response.ok) {
            throw new Error(`Erreur réseau: ${response.status}`);
          }
          return response.json();
        })
        .then(data => {
          // Vérifier si les données contiennent une erreur
          if (data.error) {
            throw new Error(data.message || 'Erreur serveur');
          }

          // Vérifier si les données sont valides
          if (!data || !data.html) {
            throw new Error('Données de réponse invalides');
          }

          // Mettre à jour le tableau des utilisateurs
          document.getElementById('users-table-container').innerHTML = data.html;

          // Réinitialiser les animations
          animateTableRows();

          // Mettre à jour les événements de pagination et de tri
          setTimeout(() => {
            setupPaginationEvents();
            setupSortEvents();
          }, 100);
        })
        .catch(error => {
          console.error('Erreur lors du chargement des utilisateurs:', error);

          // Afficher un message d'erreur dans le conteneur du tableau
          document.getElementById('users-table-container').innerHTML = `
            <div class="alert alert-danger text-center my-5">
              <i class="fas fa-exclamation-triangle me-2"></i>
              <strong>Erreur lors du chargement des utilisateurs</strong>
              <p class="mb-0 mt-2">Veuillez réinitialiser les filtres ou rafraîchir la page.</p>
              <div class="mt-3">
                <button class="btn btn-outline-danger me-2" onclick="window.location.reload()">
                  <i class="fas fa-sync-alt me-2"></i>Rafraîchir la page
                </button>
                <button class="btn btn-outline-primary" onclick="resetAndReload()">
                  <i class="fas fa-undo me-2"></i>Réinitialiser les filtres
                </button>
              </div>
            </div>
          `;

          // Afficher une alerte SweetAlert
          Swal.fire({
            title: 'Erreur',
            text: 'Une erreur est survenue lors du chargement des utilisateurs. Veuillez réinitialiser les filtres ou rafraîchir la page.',
            icon: 'error',
            confirmButtonText: 'OK'
          });
        });
      }

      // Fonction pour réinitialiser les filtres et recharger
      function resetAndReload() {
        // Réinitialiser les critères de recherche
        searchCriteria = {
          search: '',
          role: '',
          is_verified: '',
          sort_by: '',
          sort_dir: '',
          page: 1
        };

        // Réinitialiser les champs de formulaire
        document.getElementById('search-input').value = '';
        if (document.getElementById('role-filter')) {
          document.getElementById('role-filter').value = '';
        }
        if (document.getElementById('status-filter')) {
          document.getElementById('status-filter').value = '';
        }

        // Charger les utilisateurs
        loadUsers();
      }

      // Fonction pour configurer les événements de pagination
      function setupPaginationEvents() {
        document.querySelectorAll('.pagination-horizontal a').forEach(link => {
          link.addEventListener('click', function(e) {
            e.preventDefault();

            // Extraire le numéro de page de l'URL
            const url = new URL(this.href, window.location.origin);
            const page = url.searchParams.get('page') || 1;

            // Mettre à jour le critère de page
            searchCriteria.page = page;

            // Ajouter une classe pour indiquer la page active visuellement
            document.querySelectorAll('.pagination-horizontal .page-item').forEach(item => {
              item.classList.remove('active');
            });
            this.closest('.page-item').classList.add('active');

            // Charger les utilisateurs
            loadUsers();

            // Faire défiler vers le haut du tableau
            document.querySelector('.card.shadow-sm').scrollIntoView({ behavior: 'smooth' });
          });
        });
      }

      // Événement de recherche
      document.getElementById('search-btn').addEventListener('click', function() {
        searchCriteria.search = document.getElementById('search-input').value;
        searchCriteria.page = 1;
        loadUsers();
      });

      // Événement de recherche sur la touche Entrée
      document.getElementById('search-input').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
          e.preventDefault();
          searchCriteria.search = this.value;
          searchCriteria.page = 1;
          loadUsers();
        }
      });

      // Événement de filtre par rôle
      document.getElementById('role-filter').addEventListener('change', function() {
        searchCriteria.role = this.value;
        searchCriteria.page = 1;
        loadUsers();
      });

      // Événement de filtre par statut
      document.getElementById('status-filter').addEventListener('change', function() {
        searchCriteria.is_verified = this.value;
        searchCriteria.page = 1;
        loadUsers();
      });

      // Événements de tri
      document.getElementById('sort-salary-asc').addEventListener('click', function() {
        searchCriteria.sort_by = 'salary';
        searchCriteria.sort_dir = 'asc';
        searchCriteria.page = 1;
        loadUsers();
      });

      document.getElementById('sort-salary-desc').addEventListener('click', function() {
        searchCriteria.sort_by = 'salary';
        searchCriteria.sort_dir = 'desc';
        searchCriteria.page = 1;
        loadUsers();
      });

      document.getElementById('sort-name-asc').addEventListener('click', function() {
        searchCriteria.sort_by = 'name';
        searchCriteria.sort_dir = 'asc';
        searchCriteria.page = 1;
        loadUsers();
      });

      document.getElementById('sort-name-desc').addEventListener('click', function() {
        searchCriteria.sort_by = 'name';
        searchCriteria.sort_dir = 'desc';
        searchCriteria.page = 1;
        loadUsers();
      });

      // Événement de réinitialisation des filtres
      document.getElementById('reset-filters').addEventListener('click', function() {
        // Réinitialiser les critères de recherche
        searchCriteria = {
          search: '',
          role: '',
          is_verified: '',
          sort_by: '',
          sort_dir: '',
          page: 1
        };

        // Réinitialiser les champs de formulaire
        document.getElementById('search-input').value = '';
        document.getElementById('role-filter').value = '';
        document.getElementById('status-filter').value = '';

        // Charger les utilisateurs
        loadUsers();
      });

      // Fonction pour configurer les événements de tri dans l'en-tête du tableau
      function setupSortEvents() {
        const sortLinks = document.querySelectorAll('.sort-link');

        sortLinks.forEach(link => {
          // Supprimer les anciens écouteurs d'événements pour éviter les doublons
          link.removeEventListener('click', handleSortClick);
          // Ajouter le nouvel écouteur d'événements
          link.addEventListener('click', handleSortClick);
        });
      }

      // Fonction de gestion du clic sur un lien de tri
      function handleSortClick(e) {
        e.preventDefault();

        const sortField = this.getAttribute('data-sort');

        // Déterminer la direction de tri (inverser si on clique sur le même champ)
        let sortDir = 'asc';
        if (searchCriteria.sort_by === sortField && searchCriteria.sort_dir === 'asc') {
          sortDir = 'desc';
        }

        // Mettre à jour les critères de recherche
        searchCriteria.sort_by = sortField;
        searchCriteria.sort_dir = sortDir;
        searchCriteria.page = 1;

        // Mettre à jour l'interface utilisateur pour indiquer le tri actif
        document.querySelectorAll('.sort-link i').forEach(icon => {
          icon.className = 'fas fa-sort ms-1';
        });

        const icon = this.querySelector('i');
        if (sortDir === 'asc') {
          icon.className = 'fas fa-sort-up ms-1';
        } else {
          icon.className = 'fas fa-sort-down ms-1';
        }

        // Charger les utilisateurs avec les nouveaux critères de tri
        loadUsers();
      }

      // Configurer les événements de pagination et de tri initiaux
      setupPaginationEvents();

      // Attendre que le DOM soit complètement chargé pour configurer les événements de tri
      setTimeout(() => {
        setupSortEvents();
      }, 100);
    });
  </script>
{% endblock %}