{% block title %}Inscription{% endblock %}

{% block stylesheets %}
    <link rel="stylesheet" href="{{ asset('backoffice/css/app.css') }}">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;600&display=swap" rel="stylesheet">
    <style>
        .social-login {
            margin-top: 15px;
            padding-top: 15px;
            border-top: 1px solid #ddd;
        }
        .btn-google {
            background-color: #DB4437;
            color: white;
        }
        .btn-google:hover {
            background-color: #C53929;
            color: white;
        }
        .form-row {
            display: flex;
            flex-wrap: wrap;
            margin-right: -5px;
            margin-left: -5px;
        }
        .form-row > div {
            padding-left: 5px;
            padding-right: 5px;
        }
    </style>
{% endblock %}

{% block body %}
    <main class="d-flex w-100">
        <div class="container d-flex flex-column">
            <div class="row vh-100">
                <div class="col-sm-10 col-md-8 col-lg-6 mx-auto d-table h-100">
                    <div class="d-table-cell align-middle">

                        <div class="text-center mt-4">
                            <h1 class="h2">Créer un compte</h1>
                            <p class="lead">
                                Inscrivez-vous pour accéder à notre plateforme
                            </p>
                        </div>

                        <div class="card">
                            <div class="card-body">
                                <div class="m-sm-4">
                                    <div class="text-center">
                                        <img src="{{ asset('backoffice/img/avatars/default.jpg') }}"
                                             alt="Utilisateur"
                                             class="img-fluid rounded-circle"
                                             width="132"
                                             height="132">
                                    </div>

                                    <form method="post" novalidate id="signupForm">
                                        {% if errors is defined and errors|length > 0 %}
                                            <div class="alert alert-danger">
                                                <ul class="mb-0">
                                                    {% for error in errors %}
                                                        <li>{{ error.message }}</li>
                                                    {% endfor %}
                                                </ul>
                                            </div>
                                        {% endif %}

                                        <div class="form-row">
                                            <div class="col-md-6 mb-3">
                                                <label class="form-label">Nom</label>
                                                <input type="text" id="lastname" name="lastname" 
                                                       class="form-control form-control-lg"
                                                       placeholder="Votre nom" required>
                                                <div id="lastnameError" class="invalid-feedback"></div>
                                            </div>
                                            
                                            <div class="col-md-6 mb-3">
                                                <label class="form-label">Prénom</label>
                                                <input type="text" id="firstname" name="firstname" 
                                                       class="form-control form-control-lg"
                                                       placeholder="Votre prénom" required>
                                                <div id="firstnameError" class="invalid-feedback"></div>
                                            </div>
                                        </div>

                                        <div class="mb-3">
                                            <label class="form-label">CIN</label>
                                            <input type="text" id="cin" name="cin"
                                                   class="form-control form-control-lg"
                                                   placeholder="Votre numéro de CIN" required>
                                            <div id="cinError" class="invalid-feedback"></div>
                                        </div>

                                        <div class="mb-3">
                                            <label class="form-label">Email</label>
                                            <input type="email" id="email" name="email"
                                                   class="form-control form-control-lg"
                                                   placeholder="Votre email" required>
                                            <div id="emailError" class="invalid-feedback"></div>
                                        </div>

                                        <div class="mb-3">
                                            <label class="form-label">Numéro de téléphone</label>
                                            <input type="tel" id="phone" name="phone"
                                                   class="form-control form-control-lg"
                                                   placeholder="Votre numéro de téléphone" required>
                                            <div id="phoneError" class="invalid-feedback"></div>
                                        </div>

                                        <div class="mb-3">
                                            <label class="form-label">Mot de passe</label>
                                            <input type="password" id="password" name="password"
                                                   class="form-control form-control-lg"
                                                   placeholder="Créer un mot de passe" required>
                                            <div id="passwordError" class="invalid-feedback"></div>
                                        </div>

                                        <div class="mb-3">
                                            <label class="form-label">Confirmer le mot de passe</label>
                                            <input type="password" id="confirmPassword" name="confirmPassword"
                                                   class="form-control form-control-lg"
                                                   placeholder="Confirmer votre mot de passe" required>
                                            <div id="confirmPasswordError" class="invalid-feedback"></div>
                                        </div>

                                        <input type="hidden" name="_csrf_token" value="{{ csrf_token('authenticate') }}">

                                        <div class="text-center mt-3">
                                            <button type="submit" class="btn btn-lg btn-primary w-100">
                                                Créer un compte
                                            </button>
                                        </div>

                                        <div class="social-login text-center">
                                            <p class="mb-2">Ou inscrivez-vous avec</p>
                                     
                                                <i class="align-middle me-1" data-feather="mail"></i> Google
                                            </a>
                                        </div>

                                        <div class="text-center mt-3">
                                            <small>Vous avez déjà un compte ?
                                                <a href="{{ path('app_login') }}">Connexion</a>
                                            </small>
                                        </div>
                                    </form>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </main>
{% endblock %}

{% block javascripts %}
    <script src="{{ asset('backoffice/js/app.js') }}"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const form = document.getElementById('signupForm');
            const lastnameField = document.getElementById('lastname');
            const firstnameField = document.getElementById('firstname');
            const cinField = document.getElementById('cin');
            const emailField = document.getElementById('email');
            const phoneField = document.getElementById('phone');
            const passwordField = document.getElementById('password');
            const confirmPasswordField = document.getElementById('confirmPassword');

            const lastnameError = document.getElementById('lastnameError');
            const firstnameError = document.getElementById('firstnameError');
            const cinError = document.getElementById('cinError');
            const emailError = document.getElementById('emailError');
            const phoneError = document.getElementById('phoneError');
            const passwordError = document.getElementById('passwordError');
            const confirmPasswordError = document.getElementById('confirmPasswordError');

            // Fonctions de validation
            function validateRequired(value, fieldName) {
                if (!value.trim()) {
                    return { isValid: false, message: `Le champ ${fieldName} est requis` };
                }
                return { isValid: true, message: "" };
            }

            function validateName(value, fieldName) {
                const required = validateRequired(value, fieldName);
                if (!required.isValid) return required;
                
                if (value.trim().length < 2) {
                    return { isValid: false, message: `${fieldName} doit contenir au moins 2 caractères` };
                }
                return { isValid: true, message: "" };
            }

            function validateCIN(cin) {
                const required = validateRequired(cin, "CIN");
                if (!required.isValid) return required;

                // Vérifier si le CIN est un format valide (exemple pour Tunisie: 8 chiffres)
                const re = /^\d{8}$/;
                return { 
                    isValid: re.test(cin), 
                    message: "Le CIN doit contenir 8 chiffres" 
                };
            }

            function validateEmail(email) {
                const required = validateRequired(email, "Email");
                if (!required.isValid) return required;

                const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                return { 
                    isValid: re.test(String(email).toLowerCase()), 
                    message: "Format d'adresse email invalide" 
                };
            }

            function validatePhone(phone) {
                const required = validateRequired(phone, "Numéro de téléphone");
                if (!required.isValid) return required;

                // Format tunisien: commencer par 2, 5, 9 ou 4 et avoir 8 chiffres
                const re = /^[2459]\d{7}$/;
                return { 
                    isValid: re.test(phone), 
                    message: "Le numéro de téléphone doit être valide (8 chiffres commençant par 2, 4, 5 ou 9)" 
                };
            }

            function validatePassword(password) {
                const required = validateRequired(password, "Mot de passe");
                if (!required.isValid) return required;

                if (password.length < 9) {
                    return { isValid: false, message: "Le mot de passe doit contenir au moins 9 caractères" };
                }
                return { isValid: true, message: "" };
            }

            function validateConfirmPassword(confirmPassword, password) {
                const required = validateRequired(confirmPassword, "Confirmation du mot de passe");
                if (!required.isValid) return required;

                if (confirmPassword !== password) {
                    return { isValid: false, message: "Les mots de passe ne correspondent pas" };
                }
                return { isValid: true, message: "" };
            }

            function setValidationState(element, errorElement, validation) {
                if (validation.isValid) {
                    element.classList.remove('is-invalid');
                    element.classList.add('is-valid');
                    errorElement.textContent = "";
                } else {
                    element.classList.remove('is-valid');
                    element.classList.add('is-invalid');
                    errorElement.textContent = validation.message;
                }
                return validation.isValid;
            }

            // Ajouter des événements de validation en temps réel
            lastnameField.addEventListener('input', function() {
                const validation = validateName(lastnameField.value, "Nom");
                setValidationState(lastnameField, lastnameError, validation);
            });

            firstnameField.addEventListener('input', function() {
                const validation = validateName(firstnameField.value, "Prénom");
                setValidationState(firstnameField, firstnameError, validation);
            });

            cinField.addEventListener('input', function() {
                const validation = validateCIN(cinField.value);
                setValidationState(cinField, cinError, validation);
            });

            emailField.addEventListener('input', function() {
                const validation = validateEmail(emailField.value);
                setValidationState(emailField, emailError, validation);
            });

            phoneField.addEventListener('input', function() {
                const validation = validatePhone(phoneField.value);
                setValidationState(phoneField, phoneError, validation);
            });

            passwordField.addEventListener('input', function() {
                const validation = validatePassword(passwordField.value);
                setValidationState(passwordField, passwordError, validation);
                
                // Mettre à jour la validation du champ de confirmation si ce dernier a déjà été rempli
                if (confirmPasswordField.value) {
                    const confirmValidation = validateConfirmPassword(confirmPasswordField.value, passwordField.value);
                    setValidationState(confirmPasswordField, confirmPasswordError, confirmValidation);
                }
            });

            confirmPasswordField.addEventListener('input', function() {
                const validation = validateConfirmPassword(confirmPasswordField.value, passwordField.value);
                setValidationState(confirmPasswordField, confirmPasswordError, validation);
            });

            // Validation de tous les champs lors de la perte de focus
            lastnameField.addEventListener('blur', function() {
                const validation = validateName(lastnameField.value, "Nom");
                setValidationState(lastnameField, lastnameError, validation);
            });

            firstnameField.addEventListener('blur', function() {
                const validation = validateName(firstnameField.value, "Prénom");
                setValidationState(firstnameField, firstnameError, validation);
            });

            cinField.addEventListener('blur', function() {
                const validation = validateCIN(cinField.value);
                setValidationState(cinField, cinError, validation);
            });

            emailField.addEventListener('blur', function() {
                const validation = validateEmail(emailField.value);
                setValidationState(emailField, emailError, validation);
            });

            phoneField.addEventListener('blur', function() {
                const validation = validatePhone(phoneField.value);
                setValidationState(phoneField, phoneError, validation);
            });

            passwordField.addEventListener('blur', function() {
                const validation = validatePassword(passwordField.value);
                setValidationState(passwordField, passwordError, validation);
            });

            confirmPasswordField.addEventListener('blur', function() {
                const validation = validateConfirmPassword(confirmPasswordField.value, passwordField.value);
                setValidationState(confirmPasswordField, confirmPasswordError, validation);
            });

            // Validation du formulaire à la soumission
            form.addEventListener('submit', function(event) {
                let isFormValid = true;
                
                const lastnameValidation = validateName(lastnameField.value, "Nom");
                isFormValid = setValidationState(lastnameField, lastnameError, lastnameValidation) && isFormValid;
                
                const firstnameValidation = validateName(firstnameField.value, "Prénom");
                isFormValid = setValidationState(firstnameField, firstnameError, firstnameValidation) && isFormValid;
                
                const cinValidation = validateCIN(cinField.value);
                isFormValid = setValidationState(cinField, cinError, cinValidation) && isFormValid;
                
                const emailValidation = validateEmail(emailField.value);
                isFormValid = setValidationState(emailField, emailError, emailValidation) && isFormValid;
                
                const phoneValidation = validatePhone(phoneField.value);
                isFormValid = setValidationState(phoneField, phoneError, phoneValidation) && isFormValid;
                
                const passwordValidation = validatePassword(passwordField.value);
                isFormValid = setValidationState(passwordField, passwordError, passwordValidation) && isFormValid;
                
                const confirmPasswordValidation = validateConfirmPassword(confirmPasswordField.value, passwordField.value);
                isFormValid = setValidationState(confirmPasswordField, confirmPasswordError, confirmPasswordValidation) && isFormValid;
                
                if (!isFormValid) {
                    event.preventDefault();
                }
            });
        });
    </script>
{% endblock %}